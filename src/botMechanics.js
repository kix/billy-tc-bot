const TeamCity = require('./teamcity.js');
const config = require('../config.json');

const buildStatuses = {
    success: 'SUCCESS',
    failure: 'FAILURE'
};

class BotMechanics {
    constructor(bot) {
        this._bot = bot;
        this._tcMap = {
            default: new TeamCity(config['default-branch'])
        };
        this._branchMap = {
            default: config['default-branch']
        };
        this._timerMap = {};
        this._lastTestStatusMap = {};
        this._defaultErrorMessage = '‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å /status';
    }

    setBranch(chatId, branch) {
        this._branchMap[chatId] = branch;
    }

    getBranch(chatId) {
        return this._branchMap[chatId];
    }

    initTeamCityClient(chatId) {
        this._tcMap[chatId] = new TeamCity(this._branchMap[chatId]);
    }

    addBuildWatcher(chatId) {
        this._timerMap[chatId] = setInterval(
            this.testsWatcher.bind(this, chatId),
            config['check-interval-ms']
        );

        this.sendMessage(
            chatId,
            `–°–º–æ—Ç—Ä–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ _${this._branchMap[chatId]}_`,
            {'parse_mode': 'Markdown'}
        );
    }

    removeBuildWatcher(chatId) {
        clearInterval(this._timerMap[chatId]);
        delete this._timerMap[chatId];

        this.sendMessage(
            chatId,
            `–ë–æ–ª—å—à–µ –Ω–µ —Å–º–æ—Ç—Ä–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ _${this._branchMap[chatId]}_`,
            {'parse_mode': 'Markdown'}
        );
    }

    testsWatcher(chatId) {
        const tc = this._tcMap[chatId] || this._tcMap.default;

        tc.getLastUnitTest()
            .then(test => {
                const { status, webUrl } = test;
                let message = '';

                console.log('old status', this._lastTestStatusMap[chatId]);
                console.log('new status', status);
                if (status === this._lastTestStatusMap[chatId]) {
                    return;
                }

                message += this.getStatusEmoji(status) + ' ';

                if (status === buildStatuses.success) {
                    message += '–£—Ä–∞! –¢–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ!';
                } else if (status === buildStatuses.failure) {
                    message += '–¢–µ—Å—Ç—ã —É–ø–∞–ª–∏, –ø–æ–¥–Ω–∏–º–∏—Ç–µ, –±—É–¥—å—Ç–µ –ª—é–±–µ–∑–Ω—ã';
                }

                message += ' ';
                message += `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${webUrl})`;

                this._lastTestStatusMap[chatId] = status;
                this.sendMessage(chatId, message, {'parse_mode': 'Markdown'});
            })
            .catch(e => {
                this.reportError(chatId, e);
            });
    }

    checkLastUnitTest(chatId) {
        const tc = this._tcMap[chatId] || this._tcMap.default;

        return tc.getLastUnitTest()
            .then(test => {
                const { status, webUrl } = test;
                this._lastTestStatusMap[chatId] = status;

                let message = '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ';
                message += this.getStatusEmoji(status) + ' ';
                message += `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${webUrl})`;

                this.sendMessage(chatId, message, {'parse_mode': 'Markdown'});
            })
            .catch(e => {
                this.reportError(chatId, e);
            });
    }

    getStatusEmoji(status) {
        switch (status) {
            case buildStatuses.success:
                return '‚úÖ';
            case buildStatuses.failure:
                return '‚ùå';
            default:
                return status;
        }
    }

    getStatusMessage(chatId) {
        let message = '';

        if (this._branchMap[chatId]) {
            message += `‚úÖ –í–µ—Ç–∫–∞: ${this._branchMap[chatId]}`;
        } else {
            message += `‚ùå –í–µ—Ç–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: _${config['default-branch']}_. –ò—Å–ø–æ–ª—å–∑—É–π /branch, –õ—é–∫!`
        }

        if (this._tcMap[chatId]) {
            message += '\n‚úÖ –ö–ª–∏–µ–Ω—Ç TeamCity –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
        } else {
            message += '\n‚ùå –ö–ª–∏–µ–Ω—Ç TeamCity –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /branch, –õ—é–∫!';
        }

        if (this._timerMap[chatId]) {
            message += '\nüëÅ –ë–æ–ª—å—à–æ–π –±—Ä–∞—Ç —Å–ª–µ–¥–∏—Ç';
        } else {
            message += '\nüï∂ –ë–æ–ª—å—à–æ–π –±—Ä–∞—Ç –Ω–µ —Å–ª–µ–¥–∏—Ç';
        }

        return message;
    }

    reportError(chatId, error) {
        this.sendMessage(chatId, this._defaultErrorMessage + '\n' + error);
    }

    sendMessage(chatId, message, options = {}) {
        this._bot.sendMessage(chatId, message, options);

        if (!this._tcMap[chatId] && !this._branchMap[chatId]) {
            this._bot.sendMessage(chatId, this.getStatusMessage(chatId), {'parse_mode': 'Markdown'});
        }
    }
}

module.exports = BotMechanics;
